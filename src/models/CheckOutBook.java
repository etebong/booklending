/*
 This class helps a member to check out book from the Licrary
The Librarian needs to provide the Book Accession Number to confirm
book availability. Then privide member number to affirm user is qualified
to borrow book.
 */
package models;

import database.ConnectDb;
import com.toedter.calendar.JDateChooser;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.swing.JOptionPane;

/**
 *
 * @author philip
 */
public class CheckOutBook extends javax.swing.JDialog {

    private Connection con;
    private PreparedStatement pst;
    private ResultSet rs;
    private Date date;
    private Statement st;
    private String yourReturnDate;
    private Calendar cal = Calendar.getInstance();

    private int catId;
    private int tbooksborrowed;
    private int issue_day, issue_month, issue_year;
    private int due_day, due_month, due_year;
    private String issue_date, due_date;

    /**
     * Creates new form CheckInBook
     */
    private Fine fine = new Fine();
    Transaction tr = new Transaction();
    private JDateChooser dateChooser;
    private int xMouse;
    private int yMouse;

    public CheckOutBook() {

        initComponents();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        txtUserId = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtUserName = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtDateIssued = new javax.swing.JTextField();
        txtDateDue = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        txtUserCat = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtAccNo = new javax.swing.JTextField();
        txtTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtAuthor = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtPublisher = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtCategory = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setAlwaysOnTop(true);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jLabel1MouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                jLabel1MouseMoved(evt);
            }
        });
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 550, 60));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/clear.png"))); // NOI18N
        jButton2.setText("Clear");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 410, -1, -1));

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtUserId.setBackground(new java.awt.Color(215, 215, 215));
        txtUserId.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        txtUserId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtUserIdFocusLost(evt);
            }
        });
        txtUserId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtUserIdKeyTyped(evt);
            }
        });
        jPanel2.add(txtUserId, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 180, -1));

        jLabel7.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel7.setText("<html>User <br>Identity</html>");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel8.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel8.setText("User's Name:");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 370, -1));

        txtUserName.setEditable(false);
        txtUserName.setBackground(new java.awt.Color(220, 220, 220));
        txtUserName.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jPanel2.add(txtUserName, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, 460, -1));

        jLabel9.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel9.setText("Date Issued:");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, -1, -1));

        jLabel10.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel10.setText("Due Date:");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 60, -1, -1));

        txtDateIssued.setEditable(false);
        txtDateIssued.setBackground(new java.awt.Color(220, 220, 220));
        txtDateIssued.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jPanel2.add(txtDateIssued, new org.netbeans.lib.awtextra.AbsoluteConstraints(408, 10, 160, -1));

        txtDateDue.setEditable(false);
        txtDateDue.setBackground(new java.awt.Color(220, 220, 220));
        txtDateDue.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jPanel2.add(txtDateDue, new org.netbeans.lib.awtextra.AbsoluteConstraints(408, 50, 160, -1));

        jLabel11.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel11.setText("User's Category:");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        txtUserCat.setEditable(false);
        txtUserCat.setBackground(new java.awt.Color(220, 220, 220));
        txtUserCat.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jPanel2.add(txtUserCat, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 50, 171, 28));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 580, 130));

        jPanel1.setBackground(new java.awt.Color(225, 223, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 255)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel4.setText("<html>Book's <br>Accession Number:</html>");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        txtAccNo.setBackground(new java.awt.Color(215, 215, 215));
        txtAccNo.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        txtAccNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAccNoFocusLost(evt);
            }
        });
        txtAccNo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtAccNoMouseClicked(evt);
            }
        });
        txtAccNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAccNoKeyTyped(evt);
            }
        });
        jPanel1.add(txtAccNo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 20, 115, 40));

        txtTitle.setEditable(false);
        txtTitle.setBackground(new java.awt.Color(220, 220, 220));
        txtTitle.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jPanel1.add(txtTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 70, 420, 34));

        jLabel3.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel3.setText("Book's Title");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        jLabel6.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel6.setText("Book's Author:");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        txtAuthor.setEditable(false);
        txtAuthor.setBackground(new java.awt.Color(220, 220, 220));
        txtAuthor.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jPanel1.add(txtAuthor, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 420, -1));

        jLabel5.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel5.setText("Book's Publisher:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, -1));

        txtPublisher.setEditable(false);
        txtPublisher.setBackground(new java.awt.Color(220, 220, 220));
        txtPublisher.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jPanel1.add(txtPublisher, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 140, 419, 34));

        jLabel12.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jLabel12.setText("Book Category:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 30, -1, -1));

        txtCategory.setEditable(false);
        txtCategory.setBackground(new java.awt.Color(220, 220, 220));
        txtCategory.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jPanel1.add(txtCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 20, 180, 40));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 580, 190));

        jLabel2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 0, 30, 40));

        jButton1.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ok.png"))); // NOI18N
        jButton1.setText("Ok");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 410, -1, -1));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/newCheckOut.png"))); // NOI18N
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void txtAccNoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAccNoFocusLost
        do_Focus_Lost(evt);
    }//GEN-LAST:event_txtAccNoFocusLost

    private void txtAccNoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtAccNoMouseClicked
        txtClear();//clears the textbox
    }//GEN-LAST:event_txtAccNoMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (txtAccNo.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Book's Accession number not Provided.");
            txtAccNo.requestFocus();
        } else if (txtUserId.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Member's Id not Provided.");
            txtUserId.requestFocus();
        } else {
            try {
                con = ConnectDb.connect();
                st = con.createStatement();

                int id = Integer.parseInt(txtUserId.getText());
                rs = st.executeQuery("Select * from users where userid=" + id + "");
                rs.next();
                tbooksborrowed = rs.getInt("totalbooksborrowed");
                tbooksborrowed++;// increase the number of books borrowed
                int bookId = Integer.parseInt(txtAccNo.getText());

                // read the values from Textfields
                String userid = txtUserId.getText();
                String userName = txtUserName.getText();
                String bookTitle = txtTitle.getText();
                String bookAuthor = txtAuthor.getText();
                String dateIssued = txtDateIssued.getText();
                String dateDue = txtDateDue.getText();
                int accNo = Integer.parseInt(txtAccNo.getText());

                int result1 = tr.saveTransaction(userid, userName, accNo, bookTitle, bookAuthor, dateIssued,
                        dateDue);

                if (result1 == 1) {

                    rs = st.executeQuery("Select * from books where accno=" + bookId + "");
                    rs.next();
                    // update the books status after books have been issued.
                    String query = "UPDATE `books` SET `status` = 'Borrowed' WHERE `books`.`accno` = " + bookId
                            + "";

                    int update = st.executeUpdate(query);
                    // update the users table
                    int result = st.executeUpdate(
                            "Update users SET totalbooksborrowed =" + tbooksborrowed + " WHERE userid=" + id + ";");
                    JOptionPane.showMessageDialog(this, "Operations successful....", "Check Out Book",
                            JOptionPane.INFORMATION_MESSAGE);
                    txtClear();

                }
            } catch (SQLException sqlex) {
                JOptionPane.showMessageDialog(this, "Problem", "Checking out Book", JOptionPane.ERROR_MESSAGE);
                dispose();
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtUserIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtUserIdFocusLost
        do_Focus_Lost(evt);
    }//GEN-LAST:event_txtUserIdFocusLost

    private void txtAccNoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAccNoKeyTyped
        char c = evt.getKeyChar();
        if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE))) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtAccNoKeyTyped

    private void txtUserIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtUserIdKeyTyped
        char c = evt.getKeyChar();
        if (!((Character.isDigit(c)) || (c == KeyEvent.VK_BACK_SPACE))) {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtUserIdKeyTyped

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        txtClear();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jLabel1MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        
        setLocation(x-xMouse, y-yMouse);
    }//GEN-LAST:event_jLabel1MouseDragged

    private void jLabel1MouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseMoved
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_jLabel1MouseMoved

        private void do_Focus_Lost(java.awt.event.FocusEvent fe) {

        Object obj = fe.getSource();
        if (obj == txtAccNo) {
            if (txtAccNo.getText().equals("")) {

            } else {
                int id = Integer.parseInt(txtAccNo.getText());
                int bookNo;
                boolean found = false;

                try {
                    con = ConnectDb.connect();
                    st = con.createStatement();

                    String sql = "SELECT * FROM books WHERE accno = " + id + "";

                    ResultSet rs = st.executeQuery(sql);

                    rs.next();
                    bookNo = rs.getInt("accno");

                    // int userid=rs.getInt("userid");
                    String bookCategory = rs.getString("category");
                    String status = rs.getString("status");

                    if (status.equals("Borrowed")) {
                        setAlwaysOnTop(false);
                        JOptionPane.showMessageDialog(null, "Book not availabale for issuance, Already borrowed ");
                        //txtClear();
                        txtAccNo.requestFocus();

                    } else if (bookCategory.equals("Reference")) {
                        //txtClear();
                        JOptionPane.showMessageDialog(this, "Book in the Reference Library Can't Be Issued to users.");
                        txtAccNo.requestFocus();

                    }
                    setAlwaysOnTop(true);

                    if (bookNo == id) {

                        found = true;
                        txtAccNo.setText("" + id);
                        txtTitle.setText("" + rs.getString("title"));
                        txtAuthor.setText("" + rs.getString("author"));
                        txtPublisher.setText("" + rs.getString("publisher"));
                        txtCategory.setText("" + rs.getString("category"));

                    } else {
                        found = false;
                    }
                } catch (SQLException sqlex) {
                    if (found == false) {
                                         
                        JOptionPane.showMessageDialog(this, "Record not Found."); 
                        txtClear();
                        txtAccNo.requestFocus();

                    }

                }
            }

        } else if (obj == txtUserId) {

            if (txtUserId.getText().equals("")) {

            } else {
                int id = Integer.parseInt(txtUserId.getText());
                int userNo, setBorrowDuration, setBooksLimit, tbooksBorrwed;
                String userCat;
                boolean find = false;

                try {
                    con = ConnectDb.connect();
                    st = con.createStatement();
                    String q = "SELECT * FROM users WHERE userID = " + id + "";
                    ResultSet rs = st.executeQuery(q);
                    rs.next();
                    userNo = rs.getInt("userID");
                    double userFine = rs.getDouble("fine");

                    if (userNo == id) {

                        find = true;

                        userCat = rs.getString("usercategory");
                        /*
						 * the following if statement set the equivalent of the
						 * usercategory in Inreger format
                         */
                        if (userCat.equals("Student")) {
                            catId = 1;
                        } else if (userCat.equals("Non Academic Staff")) {
                            catId = 2;
                        } else if (userCat.equals("Academic Staff")) {
                            catId = 3;
                        }

                        if (userFine > 0) {
                            this.setAlwaysOnTop(false);
                            int reply = JOptionPane.showConfirmDialog(null,
                                    "Are you ready to pay your fine of N" + userFine + ".00 now? ", "Confirm Payment",
                                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                            // this.setAlwaysOnTop(true);
                            if (reply == JOptionPane.YES_OPTION) {
                                // collect calculateFine and set charge to zero
                                int newFine = 0;
                                // userFine = 0;
                                int updateRecord, updateTransac;
                                updateRecord = st.executeUpdate(
                                        "update users set fine = " + newFine + " where userid = " + userNo + "");
                                updateTransac = st.executeUpdate("update transaction set fine = " + newFine
                                        + " WHERE userid = " + userNo + " and fine = " + userFine + "");
                                JOptionPane.showMessageDialog(null, "Your fine is cleard");
                            } else {
                                setAlwaysOnTop(false);
                                JOptionPane.showMessageDialog(null,
                                        "Sorry you can't be issued a book! Clear you debt ");
                                dispose();
                            }
                        }
                        setAlwaysOnTop(false);
                        txtUserId.setText("" + id);
                        txtUserName.setText("" + rs.getString("surname") + ", " + rs.getString("firstname") + " "
                                + rs.getString("middlename"));
                        txtUserCat.setText("" + userCat);//

                        tbooksBorrwed = rs.getInt("totalbooksborrowed");
                        // JOptionPane.showMessageDialog(null, tbooksBorrwed);

                        rs.close();
                        String sql1 = "Select * FROM category WHERE categoryId = " + catId + "";

                        ResultSet rs1 = st.executeQuery(sql1);
                        rs1.next();
                        setBooksLimit = rs1.getInt("borrowLimit");

                        setBorrowDuration = rs1.getInt("borrowdays");
                        rs.close();
                        // JOptionPane.showMessageDialog(null, "borrow limit is
                        // " + setBorrowDuration + " days");
                        if (tbooksBorrwed == setBooksLimit) {
                            //txtClear();
                            JOptionPane.showMessageDialog(this, "Book Limit Reached");
                            dispose();
                        }

                        // set the calender and dates used for transactions
                        GregorianCalendar gcal = new GregorianCalendar();
                        issue_day = gcal.get(Calendar.DATE);
                        issue_month = gcal.get(Calendar.MONTH) + 1;
                        issue_year = gcal.get(Calendar.YEAR);
                        due_day = issue_day + setBorrowDuration;
                        due_month = issue_month;
                        due_year = issue_year;
                        String xx, yy, zz;
                        // JOptionPane.showMessageDialog(null, "Month is" +
                        // issue_month);
                        if (issue_day < 10) {
                            xx = "0" + issue_day;
                        } else {
                            xx = "" + issue_day;
                        }
                        if (issue_month < 10) {
                            yy = "0" + issue_month;
                        } else {
                            yy = "" + issue_month;
                        }
                        issue_date = issue_year + "-" + yy + "-" + xx;

                        // while (due_day < 31) {
                        if (issue_month == 2) {

                            if (due_day > 28) {
                                issue_month = issue_month + 1;

                                due_day = due_day - 28;
                                if (issue_month > 12) {
                                    issue_month = issue_month - 12;
                                    issue_year = issue_year + 1;
                                }
                            }
                        }
                        if (issue_month == 1 || issue_month == 3 || issue_month == 5 || issue_month == 7
                                || issue_month == 8 || issue_month == 10 || issue_month == 12) {
                            if (due_day > 31) {
                                issue_month = issue_month + 1;
                                due_day = due_day - 31;
                                if (issue_month > 12) {
                                    issue_month = issue_month - 12;
                                    issue_year = issue_year + 1;
                                }
                            }
                        }

                        if (issue_month == 4 || issue_month == 6 || issue_month == 9 || issue_month == 11) {
                            if (due_day > 30) {
                                issue_month = issue_month + 1;
                                due_day = due_day - 30;
                                if (issue_month > 12) {
                                    issue_month = issue_month - 12;
                                    issue_year = issue_year + 1;
                                }
                            }
                        }

                        // here for the code
                        due_date = issue_year + "-" + issue_month + "-" + due_day;
                        // set the values to the JTextfields
                        txtUserId.setText("" + id);
                        txtDateIssued.setText(issue_date);
                        txtDateDue.setText(due_date);

                    } else {
                        find = false;
                    }
                } catch (SQLException sqlex) {
                    if (find == false) {
                        txtUserId.setText("");// Clear the field
                        txtUserId.setFocusable(true);
                        JOptionPane.showMessageDialog(this, "Record not Found.");
                    }
                }
            }
        }
    }

    private void txtClear() {
        txtAccNo.setText("");
        txtTitle.setText("");
        txtAuthor.setText("");
        txtPublisher.setText("");
        txtCategory.setText("");
        txtUserId.setText("");
        txtUserName.setText("");
        txtUserCat.setText("");
        txtUserId.setText("");
        txtDateIssued.setText("");
        txtDateDue.setText("");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txtAccNo;
    private javax.swing.JTextField txtAuthor;
    private javax.swing.JTextField txtCategory;
    private javax.swing.JTextField txtDateDue;
    private javax.swing.JTextField txtDateIssued;
    private javax.swing.JTextField txtPublisher;
    private javax.swing.JTextField txtTitle;
    private javax.swing.JTextField txtUserCat;
    private javax.swing.JTextField txtUserId;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables


}
